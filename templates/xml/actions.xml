<krpano version="1.0.8.15">

	<events 
		onenterfullscreen="set(plugin[open_fs].y, -140); set(plugin[close_fs].y, 40)"
		onexitfullscreen="set(plugin[open_fs].y, 40); set(plugin[close_fs].y, -140)"
		onloadcomplete="skin_showloading(); onloadcomplete_action()"
		onnewpano="skin_showloading();"
		onremovepano="skin_showloading();"
	/>
	
    <!--Sequence animation-->
    <action name="animate">
		if (stopSequence == false,
			inc(hotspot[%1].frame,1,get(hotspot[%1].lastframe),0);
			mul(hotspot[%1].ypos,hotspot[%1].frame,hotspot[%1].frameheight);
			txtadd(hotspot[%1].crop,'0|',get(hotspot[%1].ypos),'|',get(hotspot[%1].framewidth),'|',get(hotspot[%1].frameheight));
			delayedcall(%2, animate(%1,%2) );
		);
	</action>

	<action name="skin_buttonglow">
		if(%1 != null,
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, 0.7, 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_showloading">
		showtext(get(data[text].content), textstyle);
	</action>

	<action name="onloadcomplete_action">
		switch_sound();

		tween(layer[skin_logo].y, 40);		
		tween(plugin[in].y, 40);
		tween(plugin[out].y, 40);
		tween(plugin[left].y, 40);
		tween(plugin[right].y, 40);
		tween(plugin[up].y, 40);
		tween(plugin[down].y, 40);
		
		ifnot(fullscreen,
			tween(plugin[open_fs].y, 40);
		);

		tween(plugin[dragmode].y, 40);

		if(autorotate.enabled == true,
			tween(plugin[rotate_on].y, 40),
			tween(plugin[rotate_off].y, 40);
		);

		tween(plugin[hideall].y, 40);
		tween(plugin[showall].y, 40);
		tween(plugin[thumbsicon].x, 0);
		if(layer[thumbs].state == 'closed',
			tween(plugin[arrow].x, -10)
		);
	</action>

	<!-- Sound -->
	<action name="sound_on">
 		playsound(auto, %SWFPATH%/music/music.mp3, 0);
		set(plugin[sound_on].y, -140);
		set(plugin[sound_off].y, 40);
		set(sound_state, true);
	</action> 

	<action name="sound_off"> 
		stopallsounds();
		set(plugin[sound_off].y, -140);
		set(plugin[sound_on].y, 40);
		set(sound_state, false);
	</action> 

	<action name="switch_sound">
		if(sound_enabled == true, 
			if(sound_state == true, 
				set(plugin[sound_off].visible, true); set(plugin[sound_on].y, -140); tween(plugin[sound_off].y, 40),
				set(plugin[sound_on].visible, true); set(plugin[sound_off].y, -140); tween(plugin[sound_on].y, 40)
				));
	</action>

	<action name="hideall">
        set(plugin[hideall].visible,false);
		set(plugin[showall].visible,true);

		tween(plugin[sound_on].y, -140);
		tween(plugin[sound_off].y, -140);
		
		tween(plugin[open_fs].y, -140);
		tween(plugin[close_fs].y, -140);

		tween(plugin[right].y, -140);
		tween(plugin[left].y, -140);
		tween(plugin[down].y, -140);
		tween(plugin[up].y, -140);
		tween(plugin[in].y, -140);
		tween(plugin[out].y, -140);
		

		tween(layer[skin_logo].y, -140);

		tween(plugin[dragmode].y, -140);
		tween(plugin[movemode].y, -140);

		tween(plugin[rotate_on].y, -140);
		tween(plugin[rotate_off].y, -140);
		
		tween(layer[arrow].x, 40);
		tween(plugin[thumbsicon].x, 40);

		if(layer[thumbs].state == 'opened',
			thumbs_onclick(););
	</action>


<!-- action SHOWALL ,    Lensflares & Hotspots -->
	
	<action name="showall">
		switch_sound();

		tween(layer[arrow].x, -10);
		tween(plugin[thumbsicon].x, 0);

		if(fullscreen, 
			tween(plugin[close_fs].y, 40),
			tween(plugin[open_fs].y, 40);
		);

		if(autorotate.enabled,
			tween(plugin[rotate_on].y, 40),
			tween(plugin[rotate_off].y, 40);
		);

		if(dragmode,
			tween(plugin[movemode].y, 40),
			tween(plugin[dragmode].y, 40);
		);
		
		tween(plugin[right].y, 40);
		tween(plugin[left].y, 40);
		tween(plugin[down].y, 40);
		tween(plugin[up].y, 40);
		tween(plugin[in].y, 40);
		tween(plugin[out].y, 40);

		set(plugin[hideall].visible, true);
		set(plugin[showall].visible, false);

		tween(layer[skin_logo].y, 40);
	</action>

	<!-- actions to change the mouse cursor image -->
	<action name="dragcursor">
		set(plugin[dragmode].y, -140);
		set(plugin[movemode].y, 40);
		set(control.mousetype, drag2D);
		set(cursors.url, %CURRENTXML%/skin/drag-cursors.png);
		set(cursors.type, drag);
		set(cursors.move,  2|0|30|32);
		set(cursors.drag, 37|0|30|32);
		set(dragmode, true);
	</action>

	<action name="qtvrcursor">
		set(plugin[dragmode].y, 40);
		set(plugin[movemode].y, -140);
		set(control.mousetype, moveto);
		set(cursors.url, %SWFPATH%/skin/qtvr-cursors.png);
		set(cursors.type, 8way);
		set(cursors.move,       0|0|16|16);
		set(cursors.drag,      16|0|16|16);
		set(cursors.arrow_u,   32|0|16|16);
		set(cursors.arrow_d,   48|0|16|16);
		set(cursors.arrow_l,   64|0|16|16);
		set(cursors.arrow_r,   80|0|16|16);
		set(cursors.arrow_lu,  96|0|16|16);
		set(cursors.arrow_ru, 112|0|16|16);
		set(cursors.arrow_rd, 128|0|16|16);
		set(cursors.arrow_ld, 144|0|16|16);
		set(dragmode, false);
	</action>

	<action name="rotate_on">
      set(plugin[rotate_on].y, 40);
      set(plugin[rotate_off].y, -140);
      switch(autorotate.enabled);
      set(autorotate_status, true);
    </action>

    <action name="rotate_off">
      set(plugin[rotate_off].y, 40);
      set(plugin[rotate_on].y, -140);   
      switch(autorotate.enabled);
      set(autorotate_status, false);
    </action>

	<autorotate
		enabled  = "true"
        waittime = "4"
        accel    = "3"
        speed    = "3"
        horizon  = "0"
        tofov    = "NaN"
    />

	<action name="thumbs_onclick">
		if(layer[thumbs].state == 'closed', 
			tween(layer[thumbs].x, 0, 1, easeOutQuint); set(layer[arrow].rotate, 180); set(layer[arrow].x, -15), 
			tween(layer[thumbs].x, -157, 1,easeOutQuint); set(layer[arrow].rotate, 0); set(layer[arrow].x, -10)); 
			switch(layer[thumbs].state, 'closed', 'opened');
	</action>

	<action name="thumb_onclick">
		loadscene(get(linkedscene), null, MERGE|KEEPPLUGIN, BLEND(0.5));
	</action>

	<action name="addthumbs">
		mul(thumbarheight, scene.count, 140);
		add(thumbarheight,10);
		copy(layer[scrollarea].height, thumbarheight);
		for(set(i, 0), i LT scene.count, inc(i),
			txtadd(thumbname,'thumb_', get(i));
			addlayer(get(thumbname));
			copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
			set(layer[get(thumbname)].keep, true);
			set(layer[get(thumbname)].parent, 'scrollarea');
			set(layer[get(thumbname)].align, lefttop);
			mul(thumby, i, 90);
			add(thumby, 10);
			copy(layer[get(thumbname)].y, thumby);
			set(layer[get(thumbname)].x, 17);
			set(layer[get(thumbname)].width, 120);
			set(layer[get(thumbname)].height, 80);
			set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
			set(layer[get(thumbname)].onclick, thumb_onclick());

			set(scene[get(i)].thumb_name, get(thumbname));

			set(layer[get(thumbname)].onover, magnify(get(scene[get(linkedscene)].thumb_name)));
			set(layer[get(thumbname)].onout,  lie(get(scene[get(linkedscene)].thumb_name)));

			set(layer[get(thumbname)].onhover, showtext(get(scene[get(linkedscene)].title), buttonstyle));
		   );
	</action>

    <!-- action performed when mouse hovers over a thumbnail preview -->
    <action name="magnify">
		tween(layer[%1].alpha,  1.0, 0.3, easeInQuad);
		tween(layer[%1].scale, 1.05, 0.3, easeInQuad);
	</action>
    <!-- action performed when mouse goes away from a thumbnail preview -->
    <action name="lie">
		tween(layer[%1].alpha, 0.8, 0.3, easeInQuad);
		tween(layer[%1].scale, 1.0, 0.3, easeInQuad);
	</action>

	<plugin name="soundinterface"
	        url="%SWFPATH%/plugins/soundinterface.swf"
	        alturl="%SWFPATH%/plugins/soundinterface.js"
	        rootpath="%CURRENTXML%"
	        preload="true" keep="true"
	/>

</krpano>